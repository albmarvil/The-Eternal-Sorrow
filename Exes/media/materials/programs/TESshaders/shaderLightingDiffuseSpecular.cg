//author: Cesar Manuel Paz Guzman


void snm_vs(	float4 position : POSITION, 
				float2 uv0 : TEXCOORD0, 

				uniform float4 lightPosition,  
				uniform float4x4 WorldMatrix, 
				uniform float4x4 ViewProjectionMatrix,
				uniform float3 eyePosition,

				out float4 oposition : POSITION, 
				out float2 ouv0 : TEXCOORD0, 
				out float3 olightDirection : TEXCOORD1,
				out float3 eyeDirection : TEXCOORD2,
				out float4 wposition : TEXCOORD3
				)
	{
		oposition = mul(ViewProjectionMatrix, position); //Transformamos la posicion de object space a world space
		wposition = mul(WorldMatrix, position);

		ouv0 = uv0; //Devolemos las coordenada uv como estaban

		//Me creo una nueva coordenada uv corresponiente a la luz y pasarsela al pixel shader
		olightDirection = mul(WorldMatrix, lightPosition).xyz - mul(WorldMatrix, position).xyz * lightPosition.w;

		//Calculamos la direccion que hay desde la camara a la posicion del vertice, y calculamos cual es la direccion que hay en el angulo medio H
		eyeDirection = eyePosition - position.xyz;


	}

//Pasa de rango [0,1] a [-1,1]
float3 expand(float3 v)
{
	return 2*(v-0.5);
}


//La luz specular se asocia a una luz difusa. Por cada luz difusa, la luz specular tendrá un efecto determinado.
void snm_ps(float2 normalMapCoord : TEXCOORD0, 
			float3 lightDirection : TEXCOORD1, 
			float3 eyeDirection : TEXCOORD2 , 
			float4 wposition : TEXCOORD3,

			uniform float4 lightColour, 
			uniform float4 Ks,
			uniform float4 Kd,
			uniform float shininess,
			uniform float4 lightPos0,
			uniform float4 Atten0,

			uniform sampler2D diffuseTex : register(s0),
			uniform sampler2D normalMap : register(s1), 
			uniform sampler2D specularTex: register(s2), 
			
			out float4 olightColor : COLOR
	  	)


			{
				float attenuation = 1;
				if(lightPos0.w != 0) //Solo para las luces puntuales
				{
					float dist = (pow(lightPos0.x - wposition.x, 2) + pow(lightPos0.y - wposition.y,2) + pow(lightPos0.z - wposition.z,2)) /  pow(Atten0.r,2);
					float attenDiv = Atten0.b*sqrt(dist) + Atten0.w * dist;
					attenuation = max(0, 1 - attenDiv);
				}
				
				//Normalizamos la direccion de la luz: LUZ DIFUSA
				float3 normlightTex = normalize(lightDirection);
				float3 normlightDir = expand(normlightTex);

				//Obtenems el color del texel en el bump map, para traducirlo a normalMap
				float3 normalTex = tex2D(normalMap, normalMapCoord).xyz;
				float3 normal = expand(normalTex);

				//LUZ SPECULAR
				float3 V = normalize(eyeDirection); //Normalizamos la direccion desde la que mira el visor
				//float3 H = normalize(normlightTex + V); //Obtenemos el vector central H resultante de sumar ambos vectores normalizados
				//H = expand(H); //Lo expandimos, para que tenga signo 

				//Con esto obtengo cuanto incide la luz sobre un objeto. El angulo que tiene que formar la normal con la direccion de la luz tiene que ir
				//entre >0 y 90, dado que el cos90 = 0 y el cos 0 = 1 (La luz difusa tiene una direccion opuesta a la normal, maxima incidencia)
				float lightIntensity = saturate(dot(normlightDir, normal));

				float3 R = 2*lightIntensity*normal - normlightTex;

				//Si es menor o igual a cero, significara que la luz golpea en un angulo obtuso, y por tanto no sera visible
				float specular = lightIntensity > 0 && normlightDir.z > 0 ? saturate(dot(R, V)) : 0;
				//float specular = lightIntensity > 0 && normlightDir.z > 0 ? saturate(dot(H, normal)) : 0;

				olightColor = (Kd * lightIntensity + Ks * pow(specular, shininess) * tex2D(specularTex, normalMapCoord)) 
				* tex2D(diffuseTex, normalMapCoord) * lightColour * attenuation;
			}
 
//Ks y Kd son los colores diffuso y specular absorbidos por el material
//lightColor es el color difuso de la luz
//lightIntensity es la intensidad con la que incide la luz difusa
//specular indica la intensidad con la cual la luz es vista desde el observador. Si es un angulo obtuso no se apreciará esta luz
//tex2D(speuclarTex, normaMapCoord) indica a fuerza del brillo en ese punto comparado con el resto
//attenuation es la atenuacion de la luz
//tex2D(diffuseText, normalMapCoord) es el color del pixel en la textura (texel)

